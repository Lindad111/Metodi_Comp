import numpy as np
import matplotlib.pyplot as plt

m1 = 0.1
m2 = 0.75
V0 = 20
R = 0.3
vf = 2.353
g1 = 0
g2 = 9.81
n = 1000
grad = 57.2958

# Funzioni Lineari a e b
Ft = np.linspace(0, 2.1, 1000)
def V1x(x):
    return V0 - x / m1
V1X = V1x(Ft)
def v2(x):
    return x / m2
V2 = v2(Ft)


# Funzioni d e d'
def V2x(x, y):
    return y * np.cos(x)                                                 # Continua dopo perchè mi servono teta e V2 dall'eq. diff

# Runge-Kutta per c e c'
def f(x, v, F, g):
    return (((F * np.cos(x)) / (m2 + (m1 * (np.sin(x)) ** 2))) - ((m1 * (v ** 2) * (np.sin(x)) ** 2)/(2 * R * (m2 + (m1 * (np.sin(x) ** 2))))) - (((m1 + m2) * g * np.sin(x))/(m2 + (m1 * (np.sin(x)) ** 2))))

def f_2(x, csi, F, g):
    return f(x, R * F * csi, F, g) / ((F ** 2) * R)

def f_3(x, csi, F, g):
    return f(x, R * csi, F, g) / R

x0 = 0
csi0 = 0
t0 = 0
def RK4(F, func, fine, g):
    h = fine / n
    t = t0
    x = x0
    csi = csi0
    T = np.zeros(n)
    X = np.zeros(n)
    V = np.zeros(n)
    for i in range(n):
        T[i] = t
        X[i] = x
        if func == f_2:
            V[i] = R * F * csi
        elif func == f_3:
            V[i] = R * csi

        K1 = h * csi
        M1 = h * func(x, csi, F, g)

        K2 = h * (csi + M1/2)
        M2 = h * func(x + (K1/2), csi+(M1/2), F, g)

        K3 = h * (csi + (M2/2))
        M3 = h * func(x + (K2/2), csi + (M2/2), F, g)

        K4 = h * (csi + (M3/2))
        M4 = h * func(x + K3, csi + M3, F, g)

        x += (K1/6) + (K2/3) + (K3/ 3) + (K4/6)
        csi += (M1/6) + (M2/3) + (M3/3) + (M4/6)
        t = t + h

    M = np.array((T, X, V))
    return M                              # M è una matrice con 3 righe ed n colonne. La prima riga è quella del tempo, la seconda riga è quella di teta e la terza riga è V (Tutto in funzione di Ft grazie alla trasformazione di coordinate)


# Possiamo scrivere d e d'
G6 = RK4(6, f_2, 2.1, g1)
V2x_6 = V2x(G6[1], G6[2])                            # d'

G22 = RK4(22, f_2, 2.1, g1)
V2x_22 = V2x(G22[1], G22[2])                         # d

#Plottiamo tutte e 6 le Curve
plt.plot(G6[0], V2x_6, color="yellow")         # d'
plt.plot(G22[0], V2x_22, color="orange")        # d

plt.plot(G6[0], G6[2], color="black")          # c'
plt.plot(G22[0], G22[2], color="blue")           # c

plt.plot(Ft, V1X, color="green")               # a
plt.plot(Ft, V2, color="red")                  # b

plt.xlabel("Ft")
plt.ylabel("Velocity")
plt.xlim(0, 2.5)
plt.ylim(0, 5)
plt.show()


#FIGURA 4
FF = np.array((6, 7, 8, 10, 12, 15, 18, 21, 25))

G7 = RK4(7, f_2, 2.1, g1)
V2x_7 = V2x(G7[1], G7[2])

G8 = RK4(8, f_2, 2.1, g1)
V2x_8 = V2x(G8[1], G8[2])

G10 = RK4(10, f_2, 2.1, g1)
V2x_10 = V2x(G10[1], G10[2])

G12 = RK4(12, f_2, 2.1, g1)
V2x_12 = V2x(G12[1], G12[2])

G15 = RK4(15, f_2, 2.1, g1)
V2x_15 = V2x(G15[1], G15[2])

G18 = RK4(18, f_2, 2.1, g1)
V2x_18 = V2x(G18[1], G18[2])

G21 = RK4(21, f_2, 2.1, g1)
V2x_21 = V2x(G21[1], G21[2])

G25 = RK4(25, f_2, 2.1, g1)
V2x_25 = V2x(G25[1], G25[2])

TG = np.array((G6[0], G7[0], G8[0], G10[0], G12[0], G15[0], G18[0], G21[0], G25[0]))
AG = np.array((G6[1], G7[1], G8[1], G10[1], G12[1], G15[1], G18[1], G21[1], G25[1]))
VG = np.array((G6[2], G7[2], G8[2], G10[2], G12[2], G15[2], G18[2], G21[2], G25[2]))
V = np.array((V2x_6, V2x_7, V2x_8, V2x_10, V2x_12, V2x_15, V2x_18, V2x_21, V2x_25))

def Inter(A, B, C, D):
    e = 0.005
    ind = []
    for i in range(n):
        for j in range(n):
            if abs(A[i] - B[j]) <= e and abs(C[i] - D[j]) <= e:
                ind.append(i)
    return ind[0]

indici = np.zeros(len(FF))
for l in range(len(FF)):
    indici[l] = Inter(Ft, TG[l], V1X, V[l])
indici = np.array(indici, dtype = int)

Vfinali = np.zeros(len(FF))
for i in range(len(FF)):
    Vfinali[i] = VG[i, indici[i]]

Afinali = np.zeros(len(FF))
for i in range(len(FF)):
    Afinali[i] = AG[i, indici[i]]

A = np.ones(len(FF))
plt.plot(FF, A*2.365, linestyle=":")
plt.plot(FF, Vfinali, marker="o")
plt.ylim(1, 2.5)
plt.xlim(0, 30)
plt.show()

plt.plot(FF, Afinali*grad, marker="o")
plt.ylim(0, 90)
plt.xlim(0, 30)
plt.show()


#FIGURA 5
T = np.linspace(0, 0.5, n)
tfin = 0.3
h = tfin/n
def seno(alpha):
    return (-(g2/R)*np.sin(alpha))

def alpha(tempo0, alpha0, v0):
    alpha = alpha0
    omega = v0/R
    tempo = tempo0
    TT = np.zeros(n)
    AL = np.zeros(n)
    OM = np.zeros(n)
    for i in range(n):
        TT[i] = tempo

        K1 = h * omega
        M1 = h * seno(alpha)

        K2 = h * (omega + M1 / 2)
        M2 = h * seno(alpha + (K1 / 2))

        K3 = h * (omega + M2 / 2)
        M3 = h * seno(alpha + (K2 / 2))

        K4 = h * (omega + M3 / 2)
        M4 = h * seno(alpha + K3)

        alpha += (K1/6) + (K2/3) + (K3/3) + (K4/6)
        omega += (M1/6) + (M2/3) + (M3/3) + (M4/6)

        AL[i] = alpha
        OM[i] = omega

        tempo = tempo + h

    MALPHA = np.array((TT, AL, OM))
    return MALPHA

V1X_6 = V1x(6 * T)
V1X_25 = V1x(25 *T)

G6_2 = RK4(6, f_3, 0.5, g2)
V2x_6_2 = V2x(G6_2[1], G6_2[2])

G25_2 = RK4(25, f_3, 0.5, g2)
V2x_25_2 = V2x(G25_2[1], G25_2[2])

indi = np.array((Inter(T, G6_2[0], V1X_6, V2x_6_2), Inter(T, G25_2[0], V1X_25, V2x_25_2)))
indi = np.array(indi, dtype=int)

a = alpha(0, 0, V0*m1/(m1+m2))
b = alpha(G6_2[0, indi[0]], G6_2[1, indi[0]], G6_2[2, indi[0]])
c = alpha(G25_2[0, indi[1]], G25_2[1, indi[1]], G25_2[2, indi[1]])

plt.plot(a[0], a[1]*grad)
plt.plot(b[0], b[1]*grad, color="orange", linestyle=":")
plt.plot(c[0], c[1]*grad, color="black", linestyle=":")
plt.plot(G6_2[0, :indi[0]],  G6_2[1,:indi[0]]*grad, color="orange")
plt.plot(G25_2[0, :indi[1]], G25_2[1, :indi[1]]*grad, color="black")
plt.xlim(0, 0.5)
plt.ylim(0, 100)
plt.show()

#FIGURA 6
G6_2 = RK4(6, f_3, 0.5, g2)
V1x6_2 = V1x(6 * T)
V2x6_2 = V2x(G6_2[1], G6_2[2])

G7_2 = RK4(7, f_3, 0.5, g2)
V1x7_2 = V1x(7 * T)
V2x7_2 = V2x(G7_2[1], G7_2[2])

G8_2 = RK4(8, f_3, 0.5, g2)
V1x8_2 = V1x(8 * T)
V2x8_2 = V2x(G8_2[1], G8_2[2])

G10_2 = RK4(10, f_3, 0.5, g2)
V1x10_2 = V1x(10*T)
V2x10_2 = V2x(G10_2[1], G10_2[2])

G12_2 = RK4(12, f_3, 0.5, g2)
V1x12_2 = V1x(12*T)
V2x12_2 = V2x(G12_2[1], G12_2[2])

G15_2 = RK4(15, f_3, 0.5, g2)
V1x15_2 = V1x(15*T)
V2x15_2 = V2x(G15_2[1], G15_2[2])

G18_2 = RK4(18, f_3, 0.5, g2)
V1x18_2 = V1x(18 * T)
V2x18_2 = V2x(G18_2[1], G18_2[2])

G21_2 = RK4(21, f_3, 0.5, g2)
V1x21_2 = V1x(21 * T)
V2x21_2 = V2x(G21_2[1], G21_2[2])

G25_2 = RK4(25, f_3, 0.5, g2)
V1x25_2 = V1x(25 * T)
V2x25_2 = V2x(G25_2[1], G25_2[2])

TG_2 = np.array((G6_2[0], G7_2[0], G8_2[0], G10_2[0], G12_2[0], G15_2[0], G18_2[0], G21_2[0], G25_2[0]))
AG_2 = np.array((G6_2[1], G7_2[1], G8_2[1], G10_2[1], G12_2[1], G15_2[1], G18_2[1], G21_2[1], G25_2[1]))
VG_2 = np.array((G6_2[2], G7_2[2], G8_2[2], G10_2[2], G12_2[2], G15_2[2], G18_2[2], G21_2[2], G25_2[2]))
V_1 = np.array((V1x6_2, V1x7_2, V1x8_2, V1x10_2, V1x12_2, V1x15_2, V1x18_2, V1x21_2, V1x25_2))
V_2 = np.array((V2x6_2, V2x7_2, V2x8_2, V2x10_2, V2x12_2, V2x15_2, V2x18_2, V2x21_2, V2x25_2))
ind = np.zeros(len(FF))
for q in range(len(FF)):
    ind[q] = Inter(T, TG_2[q], V_1[q], V_2[q])

ind = np.array(ind, dtype=int)

Tfinali2 = np.zeros(len(FF))
for k in range(len(FF)):
    Tfinali2[k] = TG_2[k, ind[k]]

Afinali2 = np.zeros(len(FF))
for f in range(len(FF)):
    Afinali2[f] = AG_2[f, ind[f]]

Vfinali2 = np.zeros(len(FF))
for k in range(len(FF)):
    Vfinali2[k] = VG_2[k, ind[k]]

L2 = alpha(T[0], G6_2[1, ind[0]], G6_2[2, ind[0]])[1].max()
L3 = alpha(T[1], G7_2[1, ind[1]], G7_2[2, ind[1]])[1].max()
L4 = alpha(T[2], G8_2[1, ind[2]], G8_2[2, ind[2]])[1].max()
L5 = alpha(T[3], G10_2[1, ind[3]], G10_2[2, ind[3]])[1].max()
L6 = alpha(T[4], G12_2[1, ind[4]], G12_2[2, ind[4]])[1].max()
L7 = alpha(T[5], G15_2[1, ind[5]], G15_2[2, ind[5]])[1].max()
L8 = alpha(T[6], G18_2[1, ind[6]], G18_2[2, ind[6]])[1].max()
L9 = alpha(T[7], G21_2[1, ind[7]], G21_2[2, ind[7]])[1].max()
L10 = alpha(T[8], G25_2[1, ind[8]], G25_2[2, ind[8]])[1].max()

LL = np.array((L2, L3, L4, L5, L6, L7, L8, L9, L10))
plt.plot(FF, LL*grad, color="black", marker="o")
plt.plot(FF, Afinali2*grad, color="black", marker="o")
plt.xlim(5, 26)
plt.ylim(10, 100)
plt.show()
